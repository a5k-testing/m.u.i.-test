---
# SPDX-FileCopyrightText: NONE
# SPDX-License-Identifier: CC0-1.0

# IMPORTANT: Do NOT enable "Require linear history" inside rulesets for tags or this will fail with error 422 (Reference update failed)!!!
name: "1) Tag and release"
permissions: {}
on:
  workflow_dispatch:

jobs:
  create-tag:
    name: "Create tag"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: "${{ github.ref_type == 'branch' }}"
    concurrency:
      group: "${{ github.repository_id }}-${{ github.workflow }}-tag"
      cancel-in-progress: true
    outputs:
      tag-name: "${{ steps.repo-info.outputs.version }}"
    permissions:
      contents: write # Needed to create a tag

    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v5
      - name: "Parse version"
        id: "repo-info"
        shell: bash
        run: |
          # Parsing version...
          version="$(grep -m 1 -e '^version=' -- './zip-content/module.prop' | cut -d '=' -f '2-' -s)" || exit "${?}"
          printf 'version=%s\n' "${version:?}" 1>> "${GITHUB_OUTPUT?}" || exit "${?}"
      - name: "Create tag"
        uses: actions/github-script@v7
        timeout-minutes: 5
        env:
          TAG_NAME: "${{ steps.repo-info.outputs.version }}"
        with:
          retries: 3
          script: |
            /* jshint esversion: 6 */
            const tag_name = process.env.TAG_NAME;
            console.log('::notice::Tag: ' + tag_name);
            console.log('1: '+context.repo.owner);
            console.log('2: '+context.actor);
            console.log('3: '+context.sha);
            console.log('4: '+context.ref);
            throw new Error('abc');
            return false;
            //
            const responseTag = await github.rest.git.createTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag_name,
              message: 'initial version',
              object: context.sha,
              type: 'commit',
              tagger: {
                name: 'Monalisa Octocat',
                email: 'octocat@github.com',
                date: '2011-06-17T14:53:35-07:00'
              }
            }).catch(e => responseTag);
            //
            const response = await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/' + tag_name,
              sha: context.sha
            }).catch(response => response);
            if(response && response.status === 201) {
              console.log('Tag created.');
              return true;
            } else if(response && response.status === 422 && response.message === 'Reference already exists') {
              //console.warn('::warning::Tag already exist!!!');
              throw new Error('Tag already exist!!!');
            } else {
              let errorMsg = 'createRef failed';
              if(response) {
                //if(response.name) console.warn('response.name: ' + response.name);
                //if(response.statusText) console.warn('response.statusText: ' + response.statusText);
                if(response.response && response.response.headers && response.response.headers['x-ratelimit-remaining']) console.warn('Remaining rate limit: ' + response.response.headers['x-ratelimit-remaining']);
                if(response.status && response.message) errorMsg += ' with error ' + response.status + ' (' + response.message + ')';
              }
              throw new Error(errorMsg);
            }
            return false;

  call-workflow:
    name: "Call workflow"
    needs: [create-tag]
    if: "${{ github.ref_type == 'branch' }}"
    uses: "./.github/workflows/auto-release-from-tag.yml"
    with:
      tag-name: "${{ needs.create-tag.outputs.tag-name }}"
    permissions:
      contents: write # Needed to create a release
      id-token: write # Needed to attest build provenance
      attestations: write # Needed to attest build provenance
