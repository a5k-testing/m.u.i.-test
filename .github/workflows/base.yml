---
# SPDX-FileCopyrightText: (c) 2021 ale5000
# SPDX-License-Identifier: GPL-3.0-or-later

name: "Base"
permissions: {}
on:
  push:
  pull_request:
  workflow_dispatch:
jobs:
  base-job:
    name: "Artifacts, coverage and testing"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v4
      - name: Parse repo info
        id: "repo-info"
        run: |
          # Parsing informations...
          id="$(grep -m 1 -e '^id=' -- 'zip-content/module.prop' | cut -d '=' -f '2-' -s)" || exit "${?}"
          version="$(grep -m 1 -e '^version=' -- 'zip-content/module.prop' | cut -d '=' -f '2-' -s)" || exit "${?}"
          author="$(grep -m 1 -e '^author=' -- 'zip-content/module.prop' | cut -d '=' -f '2-' -s)" || exit "${?}"
          commit_id="$(git rev-parse --short "${GITHUB_SHA:?}")" || exit "${?}"
          printf 'id=%s\n' "${id?}" >> "${GITHUB_OUTPUT?}"
          printf 'version=%s\n' "${version?}" >> "${GITHUB_OUTPUT?}"
          printf 'author=%s\n' "${author?}" >> "${GITHUB_OUTPUT?}"
          printf 'commit_id=%s\n' "${commit_id?}" >> "${GITHUB_OUTPUT?}"
      - name: "Setup Java"
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      - name: "Setup Ruby"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
      - name: "Install Bashcov and simplecov-lcov"
        run: |
          # Installing Bashcov and simplecov-lcov...
          gem install bashcov:3.1.3 simplecov-lcov
      - name: "Build and coverage"
        id: "build"
        run: |
          ### Executing code coverage...
          workspace_path='${{ github.workspace }}'; readonly workspace_path
          export BUILD_TYPE=oss
          #sudo apt-get -qq -y install moreutils 1>/dev/null
          bashcov "${workspace_path:?}/build.sh"  # To timestamp the output pipe it to: TZ=UTC ts '[%H:%M:%S]'
          printf '\n'
          ### Testing of zip installation...
          echo '==========================='
          echo 'TESTING OF ZIP INSTALLATION'
          echo '==========================='
          bashcov "${workspace_path:?}/recovery-simulator/recovery.sh" "${workspace_path:?}"/output/*.zip
          printf '\n'
          echo '==============='
          echo 'RECOVERY OUTPUT'
          echo '==============='
          if test -e "${workspace_path:?}/recovery-simulator/output/recovery-output.log"; then
            cat "${workspace_path:?}/recovery-simulator/output/recovery-output.log"
          fi
          printf '\n'
          echo '==============='
          echo 'INSTALLED FILES'
          echo '==============='
          if test -e "${workspace_path:?}/recovery-simulator/output/installed-files.log"; then
            cat "${workspace_path:?}/recovery-simulator/output/installed-files.log"
          fi
      - name: "ZIP info"
        run: |
          # Retrieve informations...
          ZIP_SHORT_COMMIT_ID='${{ steps.build.outputs.ZIP_SHORT_COMMIT_ID }}'
          ZIP_FILENAME='${{ steps.build.outputs.ZIP_FILENAME }}'
          ZIP_SHA256='${{ steps.build.outputs.ZIP_SHA256 }}'
          ZIP_MD5='${{ steps.build.outputs.ZIP_MD5 }}'
          # Displaying informations...
          printf '%s\n' "::notice::Short commit ID: ${ZIP_SHORT_COMMIT_ID:-Missing}"
          printf '%s\n' "::notice::Filename: ${ZIP_FILENAME:-Missing}"
          printf '%s\n' "::notice::SHA-256: ${ZIP_SHA256:-Missing}"
          printf '%s\n' "::notice::MD5: ${ZIP_MD5:-Missing}"
      - name: "Upload artifacts"
        if: "${{ github.event_name != 'pull_request' }}"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.repo-info.outputs.id }}-${{ steps.repo-info.outputs.version }}-${{ steps.repo-info.outputs.commit_id }}-oss-by-${{ steps.repo-info.outputs.author }} archive (extract it)"
          path: "output/*.zip*"
          retention-days: 7
      - name: "Upload coverage reports to Codacy"
        if: "${{ github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && github.repository_owner == 'micro5k' }}"
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: "${{ secrets.CODACY_PROJECT_TOKEN }}"
      - name: "Upload coverage reports to Codecov"
        if: "${{ github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && github.repository_owner == 'micro5k' }}"
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          token: "${{ secrets.CODECOV_TOKEN }}"
