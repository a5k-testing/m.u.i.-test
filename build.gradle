// Copyright (C) 2016-2019, 2021 ale5000
// SPDX-License-Identifer: GPL-3.0-or-later

plugins {
    id 'com.github.spotbugs' version '4.4.1'
    id 'base'
    //id 'com.github.hierynomus.license-report' version '0.16.1'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    publishAlwaysIf(System.getenv('UPLOAD_BUILD_SCAN') != null)
}

defaultTasks 'tasks'

def isWindows() {
    return System.properties['os.name'].toLowerCase(Locale.ROOT).contains('windows')
}

def is64BitArch() {
    return System.properties['os.arch'].contains('64')
}

def getBuildScriptName() {
    if(isWindows()) {
        return './build-win.bat'
    } else {
        return './build.sh'
    }
}

task configure() {
    description = 'microG unofficial installer is a flashable zip made to simplify the installation of microG.'
    version = rootProject.file('zip-content/inc/VERSION').text.trim()
    buildDir = "${projectDir}/output"

    println 'OS: '+System.properties['os.name']
    println '64 bit: '+is64BitArch()
}

task cleanAll(type: Delete) {
    delete buildDir, "${projectDir}/cache"
}
clean.finalizedBy cleanAll

task buildOta(group: '- OTA build', description: 'Build the flashable OTA zip.') {
    doLast {
        println 'Building the flashable OTA zip with Gradle...'
        exec {
            executable = getBuildScriptName()
            args 'Gradle'
        }
    }
}

task buildOtaOSS(group: '- OTA build', description: 'Build the flashable OTA zip (open-source components only).') {
    doLast {
        println 'Building the flashable OTA zip (open-source components only) with Gradle...'
        exec {
            executable = getBuildScriptName()
            args 'Gradle'
            environment OPENSOURCE_ONLY: "1"
        }
    }
}
build.finalizedBy buildOtaOSS

task test(dependsOn: build) {
    // Dummy task
}

task downloadLicenses(dependsOn: build) {
    // Dummy task
}

task install(dependsOn: build) {
    // Dummy task
}

wrapper {
    gradleVersion = '6.5'
    distributionType = Wrapper.DistributionType.ALL
    distributionSha256Sum = 'c9910513d0eed63cd8f5c7fec4cb4a05731144770104a0871234a4edc3ba3cef'
}
