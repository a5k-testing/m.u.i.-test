// SPDX-FileCopyrightText: (c) 2016-2019, 2021 ale5000
// SPDX-License-Identifier: GPL-3.0-or-later
// SPDX-FileType: SOURCE

plugins {
    id 'base'
    //id 'com.github.hierynomus.license-report' version '0.15.0'
    //id 'com.github.spotbugs' version '4.7.6'
}

description = 'microG unofficial installer is a flashable zip made to simplify the installation of microG.'

task configure() {
    defaultTasks 'tasks'
    def props = new Properties()
    file('zip-content/module.prop').withInputStream { props.load(it) }

    archivesBaseName = props.getProperty('id')
    version = props.getProperty('version').trim()
    ext.isBeta = version.endsWith("-beta")
    ext.isAlpha = version.endsWith("-alpha")
    ext.isSnapshot = version.endsWith("-snapshot")

    rootProject.buildDir = "${projectDir}/output"
    println 'Version: '+version
    println 'OS: '+System.properties['os.name']
}

gradleEnterprise.buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    publishAlwaysIf(System.getenv('UPLOAD_BUILD_SCAN') != null)
}

tasks.register('cleanCache', Delete) {
    delete "${projectDir}/cache"
}
tasks.named('clean').configure {
    finalizedBy tasks.named('cleanCache')
}

def isWindows() {
    return System.properties['os.name'].toLowerCase(Locale.ROOT).contains('windows')
}

def getBuildScriptName() {
    if(isWindows()) {
        return './build.bat'
    } else {
        return './build.sh'
    }
}

tasks.register('buildOta') {
    group '- OTA build'
    description 'Build the flashable OTA zip.'
    doLast {
        println 'Building the flashable OTA zip with Gradle...'
        exec {
            executable = getBuildScriptName()
            args 'Gradle'
        }
    }
}

tasks.register('buildOtaOSS') {
    group '- OTA build'
    description 'Build the flashable OTA zip (open-source components only).'
    doLast {
        println 'Building the flashable OTA zip (open-source components only) with Gradle...'
        exec {
            executable = getBuildScriptName()
            args 'Gradle'
            environment OPENSOURCE_ONLY: "1"
        }
    }
}
tasks.named('build').configure {
    finalizedBy buildOtaOSS
}

// Dummy task
tasks.register('test')

// Dummy task
tasks.register('install') {
    dependsOn build
}

tasks.named('wrapper').configure {
    gradleVersion = '7.3.3'
    distributionType = Wrapper.DistributionType.ALL
    distributionSha256Sum = 'c9490e938b221daf0094982288e4038deed954a3f12fb54cbf270ddf4e37d879'
}
